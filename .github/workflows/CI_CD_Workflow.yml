name: CI/CD Workflow

on:
  push:
    branches:
      - main
      - 'release/**' # Optional: Trigger on release branches
  pull_request:
    branches:
      - main

  # Optionally, enable manual triggering of this workflow
  workflow_dispatch:

jobs:
  # Step 1: Build and Test the application
  build:
    runs-on: ubuntu-latest
    steps:
    # Step 1.1: Check out the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 1.2: Set up Java (JDK 21 for the Spring Boot app)
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: 21
        distribution: 'temurin'

    # Step 1.3: Build the project and run tests using Gradle or Maven
    - name: Build and Test with Gradle
      run: ./gradlew build -x test

#    - name: Debug build output
#      run: ls -R

#    # Step 1.4: Cache Gradle dependencies for faster builds
#    - name: Cache Gradle Dependencies
#      uses: actions/cache@v3
#      with:
#        path: ~/.gradle/caches
#        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#        restore-keys: |
#          ${{ runner.os }}-gradle-

  # Step 2: Build and Push Docker Image
  dockerize:
    runs-on: ubuntu-latest
    needs: build

    steps:
    # Step 2.1: Check out the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2.2: Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 2.3: Build Docker image
    - name: Build Docker Image
      run: |
        docker build --no-cache -t ${{secrets.DOCKER_USERNAME }}/ecommerce-app:v1 .
#        docker tag ${{ secrets.DOCKER_USERNAME }}/ecommerce-app:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/ecommerce-app:latest

    # Step 2.4: Push Docker image
    - name: Push Docker Image
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-app:v1
        docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-app:latest

  # Step 3: Deploy to Kubernetes
  deploy:
    runs-on: ubuntu-latest
    needs: dockerize

    steps:
    # Step 3.1: Check out the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 3.2: Set up kubectl
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    # Step 3.3: Authenticate Kubernetes cluster using KUBECONFIG
    - name: Set up kubeconfig
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG_DATA }}
      run: |
        echo "${KUBECONFIG}" > kubeconfig
        export KUBECONFIG=kubeconfig

    # Step 3.4: Deploy PostgreSQL and the application
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f postgres_deployment.yml
        kubectl apply -f ecommerce_deployment.yml